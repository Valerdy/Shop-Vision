// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USERS & AUTHENTICATION
// ============================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String    // Hasher avec bcrypt
  firstName     String
  lastName      String
  phone         String?
  emailVerified Boolean   @default(false)
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  wishlist      Wishlist[]
  cart          CartItem[]

  @@map("users")
}

enum UserRole {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

// ============================================
// PRODUCTS
// ============================================

model Product {
  id            String      @id @default(cuid())
  name          String
  slug          String      @unique
  brand         String
  price         Float
  description   String      @db.Text
  category      Category    @relation(fields: [categoryId], references: [id])
  categoryId    String
  gender        Gender
  frameShape    String
  material      String
  color         String
  stock         Int         @default(0)
  images        String[]    // Array of image URLs
  features      String[]    // Array of features
  isActive      Boolean     @default(true)
  isFeatured    Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  reviews       Review[]
  orderItems    OrderItem[]
  wishlist      Wishlist[]
  cartItems     CartItem[]

  @@map("products")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

enum Gender {
  MEN
  WOMEN
  UNISEX
}

// ============================================
// REVIEWS & RATINGS
// ============================================

model Review {
  id         String   @id @default(cuid())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  rating     Int      // 1-5
  title      String?
  comment    String   @db.Text
  verified   Boolean  @default(false) // Achat vérifié
  helpful    Int      @default(0)     // Nombre de "utile"
  images     String[] // Photos d'avis (optionnel)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([productId, userId]) // Un seul avis par utilisateur par produit
  @@map("reviews")
}

// ============================================
// ORDERS & PAYMENTS
// ============================================

model Order {
  id              String       @id @default(cuid())
  orderNumber     String       @unique
  user            User         @relation(fields: [userId], references: [id])
  userId          String
  status          OrderStatus  @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod

  // Montants
  subtotal        Float
  tax             Float
  shippingCost    Float
  totalAmount     Float

  // Adresse de livraison
  shippingAddress Json // Stocker l'adresse complète

  // Informations de livraison
  trackingNumber  String?
  shippedAt       DateTime?
  deliveredAt     DateTime?

  // Informations de paiement
  transactionId   String?
  paidAt          DateTime?

  // Notes
  customerNote    String?       @db.Text
  adminNote       String?       @db.Text

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  items           OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String

  // Snapshot des données produit au moment de l'achat
  productName    String
  productImage   String
  price          Float
  quantity       Int
  subtotal       Float

  createdAt  DateTime @default(now())

  @@map("order_items")
}

enum OrderStatus {
  PENDING           // En attente
  CONFIRMED         // Confirmée
  PROCESSING        // En préparation
  SHIPPED           // Expédiée
  DELIVERED         // Livrée
  CANCELLED         // Annulée
  RETURNED          // Retournée
}

enum PaymentStatus {
  PENDING           // En attente
  PAID              // Payée
  FAILED            // Échouée
  REFUNDED          // Remboursée
}

enum PaymentMethod {
  CASH_ON_DELIVERY  // Paiement à la livraison
  CREDIT_CARD       // Carte bancaire
  MOBILE_MONEY      // Mobile Money (Orange Money, MTN, etc.)
  BANK_TRANSFER     // Virement bancaire
}

// ============================================
// ADDRESSES
// ============================================

model Address {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  firstName   String
  lastName    String
  phone       String
  address     String
  city        String
  state       String
  zipCode     String
  country     String   @default("Congo")

  isDefault   Boolean  @default(false)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("addresses")
}

// ============================================
// WISHLIST
// ============================================

model Wishlist {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  addedAt    DateTime @default(now())

  @@unique([userId, productId])
  @@map("wishlist")
}

// ============================================
// SHOPPING CART
// ============================================

model CartItem {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  quantity   Int      @default(1)
  addedAt    DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, productId])
  @@map("cart_items")
}

// ============================================
// NEWSLETTER
// ============================================

model Newsletter {
  id         String   @id @default(cuid())
  email      String   @unique
  isActive   Boolean  @default(true)
  subscribedAt DateTime @default(now())
  unsubscribedAt DateTime?

  @@map("newsletter")
}

// ============================================
// CONTACTS
// ============================================

model Contact {
  id         String       @id @default(cuid())
  name       String
  email      String
  subject    String
  message    String       @db.Text
  status     ContactStatus @default(NEW)
  repliedAt  DateTime?
  createdAt  DateTime     @default(now())

  @@map("contacts")
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
}
